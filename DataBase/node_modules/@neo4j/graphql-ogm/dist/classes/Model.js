"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const pluralize_1 = __importDefault(require("pluralize"));
const camelcase_1 = __importDefault(require("camelcase"));
const graphql_2 = require("@neo4j/graphql");
function printSelectionSet(selectionSet) {
    if (typeof selectionSet === "string") {
        return graphql_1.print(graphql_1.parse(selectionSet));
    }
    return graphql_1.print(selectionSet);
}
class Model {
    constructor(input) {
        this.name = input.name;
        this.namePluralized = pluralize_1.default(input.name);
        this.camelCaseName = camelcase_1.default(this.namePluralized);
        this.neoSchema = input.neoSchema;
        this.selectionSet = input.selectionSet;
    }
    setSelectionSet(selectionSet) {
        this.selectionSet = printSelectionSet(selectionSet);
    }
    async find({ where, fulltext, options, selectionSet, args = {}, context = {}, rootValue = null, } = {}) {
        var _a;
        const argWorthy = Boolean(where || options || fulltext);
        const argDefinitions = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `$where: ${this.name}Where` : ""}`,
            `${options ? `$options: ${this.name}Options` : ""}`,
            `${fulltext ? `$fulltext: ${this.name}Fulltext` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const argsApply = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `where: $where` : ""}`,
            `${options ? `options: $options` : ""}`,
            `${fulltext ? `fulltext: $fulltext` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const selection = printSelectionSet(selectionSet || this.selectionSet);
        const query = `
            query ${argDefinitions.join(" ")}{
                ${this.camelCaseName}${argsApply.join(" ")} ${selection}
            }
        `;
        const variableValues = { where, options, ...args };
        const result = await graphql_1.graphql(this.neoSchema.schema, query, rootValue, context, variableValues);
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new Error(result.errors[0].message);
        }
        return result.data[this.camelCaseName];
    }
    async count({ where, fulltext, } = {}) {
        var _a;
        const argWorthy = Boolean(where || fulltext);
        const argDefinitions = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `$where: ${this.name}Where` : ""}`,
            `${fulltext ? `$fulltext: ${this.name}Fulltext` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const argsApply = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `where: $where` : ""}`,
            `${fulltext ? `fulltext: $fulltext` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const query = `
            query ${argDefinitions.join(" ")}{
                ${this.camelCaseName}Count${argsApply.join(" ")}
            }
        `;
        const variableValues = { where };
        const result = await graphql_1.graphql(this.neoSchema.schema, query, null, {}, variableValues);
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new Error(result.errors[0].message);
        }
        return result.data[`${this.camelCaseName}Count`];
    }
    async create({ input, selectionSet, args = {}, context = {}, rootValue = null, } = {}) {
        var _a;
        const mutationName = `create${graphql_2.upperFirst(this.namePluralized)}`;
        let selection = "";
        if (selectionSet) {
            selection = printSelectionSet(selectionSet);
        }
        else {
            selection = `
               {
                   ${this.camelCaseName}
                   ${printSelectionSet(selectionSet || this.selectionSet)}
               }
           `;
        }
        const mutation = `
            mutation ($input: [${this.name}CreateInput!]!){
               ${mutationName}(input: $input) ${selection}
            }
        `;
        const variableValues = { ...args, input };
        const result = await graphql_1.graphql(this.neoSchema.schema, mutation, rootValue, context, variableValues);
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new Error(result.errors[0].message);
        }
        return result.data[mutationName];
    }
    async update({ where, update, connect, disconnect, create, connectOrCreate, selectionSet, args = {}, context = {}, rootValue = null, } = {}) {
        var _a;
        const mutationName = `update${graphql_2.upperFirst(this.namePluralized)}`;
        const argWorthy = Boolean(where || update || connect || disconnect || create || connectOrCreate);
        let selection = "";
        if (selectionSet) {
            selection = printSelectionSet(selectionSet);
        }
        else {
            selection = `
               {
                   ${this.camelCaseName}
                   ${printSelectionSet(selectionSet || this.selectionSet)}
               }
           `;
        }
        const argDefinitions = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `$where: ${this.name}Where` : ""}`,
            `${update ? `$update: ${this.name}UpdateInput` : ""}`,
            `${connect ? `$connect: ${this.name}ConnectInput` : ""}`,
            `${disconnect ? `$disconnect: ${this.name}DisconnectInput` : ""}`,
            `${connectOrCreate ? `$connectOrCreate: ${this.name}ConnectOrCreateInput` : ""}`,
            `${create ? `$create: ${this.name}RelationInput` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const argsApply = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `where: $where` : ""}`,
            `${update ? `update: $update` : ""}`,
            `${connect ? `connect: $connect` : ""}`,
            `${disconnect ? `disconnect: $disconnect` : ""}`,
            `${connectOrCreate ? `connectOrCreate: $connectOrCreate` : ""}`,
            `${create ? `create: $create` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const mutation = `
            mutation ${argDefinitions.join(" ")}{
               ${mutationName}${argsApply.join(" ")}
               ${selection}
            }
        `;
        const variableValues = { ...args, where, update, connect, disconnect, create, connectOrCreate };
        const result = await graphql_1.graphql(this.neoSchema.schema, mutation, rootValue, context, variableValues);
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new Error(result.errors[0].message);
        }
        return result.data[mutationName];
    }
    async delete({ where, delete: deleteInput, context = {}, rootValue = null, } = {}) {
        var _a;
        const mutationName = `delete${graphql_2.upperFirst(this.namePluralized)}`;
        const argWorthy = where || deleteInput;
        const argDefinitions = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `$where: ${this.name}Where` : ""}`,
            `${deleteInput ? `$delete: ${this.name}DeleteInput` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const argsApply = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `where: $where` : ""}`,
            `${deleteInput ? `delete: $delete` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const mutation = `
            mutation ${argDefinitions.join(" ")}{
               ${mutationName}${argsApply.join(" ")} {
                   nodesDeleted
                   relationshipsDeleted
               }
            }
        `;
        const variableValues = { where, delete: deleteInput };
        const result = await graphql_1.graphql(this.neoSchema.schema, mutation, rootValue, context, variableValues);
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new Error(result.errors[0].message);
        }
        return result.data[mutationName];
    }
    async aggregate({ where, fulltext, aggregate, context = {}, rootValue = null, }) {
        var _a;
        const queryName = `${pluralize_1.default(camelcase_1.default(this.name))}Aggregate`;
        const selections = [];
        const argWorthy = Boolean(where || fulltext);
        const argDefinitions = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `$where: ${this.name}Where` : ""}`,
            `${fulltext ? `$fulltext: ${this.name}Fulltext` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        const argsApply = [
            `${argWorthy ? "(" : ""}`,
            `${where ? `where: $where` : ""}`,
            `${fulltext ? `fulltext: $fulltext` : ""}`,
            `${argWorthy ? ")" : ""}`,
        ];
        Object.entries(aggregate).forEach((entry) => {
            if (entry[0] === "count") {
                selections.push(entry[0]);
                return;
            }
            const thisSelections = [];
            Object.entries(entry[1]).forEach((e) => {
                if (Boolean(e[1]) === false) {
                    return;
                }
                thisSelections.push(e[0]);
            });
            if (thisSelections.length) {
                selections.push(`${entry[0]} {\n`);
                selections.push(thisSelections.join("\n"));
                selections.push(`}\n`);
            }
        });
        const query = `
            query ${argDefinitions.join(" ")}{
               ${queryName}${argsApply.join(" ")} {
                   ${selections.join("\n")}
               }
            }
        `;
        const variableValues = { where };
        const result = await graphql_1.graphql(this.neoSchema.schema, query, rootValue, context, variableValues);
        if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
            throw new Error(result.errors[0].message);
        }
        return result.data[queryName];
    }
}
exports.default = Model;
//# sourceMappingURL=Model.js.map